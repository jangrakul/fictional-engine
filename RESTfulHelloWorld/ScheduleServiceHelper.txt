
package helloworld.schedule.service;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import javax.inject.Named;
import javax.ws.rs.core.MultivaluedMap;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.joda.time.LocalDateTime;

import com.oracle.xmlns.oxp.service.v2.ArrayOfParamNameValue;
import com.oracle.xmlns.oxp.service.v2.ArrayOfXsdString;
import com.oracle.xmlns.oxp.service.v2.ParamNameValue;
import com.oracle.xmlns.oxp.service.v2.ParamNameValues;
import com.oracle.xmlns.oxp.service.v2.ReportRequest;
import com.oracle.xmlns.oxp.service.v2.ScheduleRequest;
import helloworld.common.type.OutputType;

/** The Class ScheduleServiceHelper. */
@Named
public class ScheduleServiceHelper {

	/** The Constant logger. */
	private static final Log logger = LogFactory.getLog(ScheduleServiceHelper.class);

	/** The Constant FILE_SEPARATOR. */
	private static final String FILE_SEPARATOR = "/";

	/** Prepares and returns the schedule request.
	 *
	 * @param parameters the parameters for report scheduling
	 * @param serviceName the service name
	 * @param applicationName the application name
	 * @param notificationServer the notification server name
	 * @return the schedule request */
	public ScheduleRequest getScheduleRequest(MultivaluedMap<String, String> parameters, String serviceName, String applicationName, String notificationServer) {
		ReportRequest reportRequest = new ReportRequest();

		String reportAbsolutePath = FILE_SEPARATOR + serviceName + FILE_SEPARATOR + applicationName + FILE_SEPARATOR + "reports" + FILE_SEPARATOR + parameters.get("P_REPORT_NAME").get(0) + ".xdo";
		reportRequest.setReportAbsolutePath(reportAbsolutePath);
		reportRequest.setSizeOfDataChunkDownload(-1);
		reportRequest.setByPassCache(true);

		ArrayOfParamNameValue arrayOfParamNameValues = new ArrayOfParamNameValue();
		boolean anyParams = false;

		for (String key : parameters.keySet()) {
			if (key.toUpperCase().startsWith("P_")) {
				ParamNameValue paramNameValue = new ParamNameValue();

				paramNameValue.setDataType("String");
				paramNameValue.setName(key);

				ArrayOfXsdString arrayOfXsdString = new ArrayOfXsdString();
				if ("P_REPORT_FORMAT".equals(key)) {
					String reportFormats = parameters.get(key).get(0);
					for (String desFormat : reportFormats.split(",")) {
						reportFormats = reportFormats.replace(desFormat, OutputType.getOutputContentTypeByFormat(desFormat));
					}
					arrayOfXsdString.getItem().add(reportFormats);
				} else {
					arrayOfXsdString.getItem().add(parameters.get(key).get(0));
				}
				paramNameValue.setValues(arrayOfXsdString);

				arrayOfParamNameValues.getItem().add(paramNameValue);
				anyParams = true;
			}
		}

		if (anyParams) {
			ParamNameValues paramNameValues = new ParamNameValues();
			paramNameValues.setListOfParamNameValues(arrayOfParamNameValues);
			reportRequest.setParameterNameValues(paramNameValues);
		}

		ScheduleRequest scheduleRequest = new ScheduleRequest();
		scheduleRequest.setNotificationServer(notificationServer);
		scheduleRequest.setNotifyHttpWhenFailed(true);
		scheduleRequest.setNotifyWhenFailed(true);
		scheduleRequest.setNotifyHttpWhenSkipped(true);
		scheduleRequest.setNotifyWhenSkipped(true);
		scheduleRequest.setNotifyHttpWhenSuccess(true);
		scheduleRequest.setNotifyWhenSuccess(true);
		scheduleRequest.setNotifyHttpWhenWarning(true);
		scheduleRequest.setNotifyWhenWarning(true);
		scheduleRequest.setSaveDataOption(true);
		scheduleRequest.setSaveOutputOption(true);
		scheduleRequest.setSchedulePublicOption(true);
		scheduleRequest.setScheduleBurstingOption(true);
		scheduleRequest.setScheduleBurstringOption(true);
		
		scheduleRequest.setJobTZ("Europe/London");

		scheduleRequest.setReportRequest(reportRequest);

		if (null != parameters.get("delay")) {
			String delayReportBy = parameters.get("delay").get(0);
			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.MINUTE, Integer.parseInt(delayReportBy));
			Date date = calendar.getTime();

			DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			//df.setTimeZone(TimeZone.getTimeZone("GMT"));
			String formattedDate = df.format(date).replace(" ", "T");
			logger.info(applicationName + " : Report start date will be :-> " + formattedDate + " Europe/London");

			scheduleRequest.setStartDate(formattedDate);
		}

		String reportName = parameters.get("P_REPORT_NAME").get(0);
		StringBuilder jobName = new StringBuilder();
		for (String strg : StringUtils.split(reportName, '_')) {
			jobName.append(StringUtils.left(strg, 1));
		}
		LocalDateTime ldt = new LocalDateTime();
		jobName.append(ldt.getYear() - 2000);
		jobName.append(StringUtils.leftPad(String.valueOf(ldt.getDayOfYear()), 3, '0'));
		jobName.append(ldt.getMillisOfDay());

		scheduleRequest.setUserJobName(jobName.toString());
		logger.debug(applicationName+ " : ScheduleRequest :-> " + scheduleRequest.toString());
		return scheduleRequest;
	}
}